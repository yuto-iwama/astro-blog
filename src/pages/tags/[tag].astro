---
import BlogPost from "../../components/BlogPost.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
  MarkdownInstance,
} from "astro";

export const getStaticPaths = (async () => {
  const allPosts: MarkdownInstance<Record<string, any>>[] =
    await Astro.glob("../posts/*.md");

  const uniqueTags: string[] = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags?.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
// type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url!} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
